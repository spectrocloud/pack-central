{{ if not .Values.apiEnabled }}

apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
---
apiVersion: v1
kind: Service
metadata:
  name: hello-universe-service
  namespace: {{ .Values.namespace }}
spec:
  type: LoadBalancer
  selector:
    app: hello-universe
  ports:
    - protocol: TCP
      port: {{ .Values.port }}
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-universe-deployment
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: hello-universe
  template:
    metadata:
      labels:
        app: hello-universe
    spec:
      containers:
        - name: hello-universe
          image: {{ .Values.images.hellouniverse }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "100m" # requesting 100 milliCPU
              memory: "512Mi" # requesting 512 MiB of memory
            limits:
              cpu: "200m" # limiting to 200 milliCPU
              memory: "1024Mi" # requesting 1024 MiB of memory

{{ end }}

{{ if .Values.apiEnabled }}

apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-reader
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello-universe-role
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-reader-binding
subjects:
  - kind: ServiceAccount
    name: hello-universe-role
    namespace: {{ .Values.namespace }}
roleRef:
  kind: ClusterRole
  name: service-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: ui
  ports:
    - protocol: TCP
      name: ui
      port: {{ .Values.port }}
      targetPort: 8080
    - protocol: TCP
      name: api
      port: 3000
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: v1
kind: Secret
metadata:
  name: db-password
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  db-password: {{ .Values.dbPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: auth-token
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  auth-token: {{ .Values.authToken }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: {{ .Values.images.hellouniversedb }}
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
      {{ if .Values.postgres.useTolerations -}}      
      tolerations:
      - effect: {{ .Values.postgres.tolerations.effect }}
        key: {{ .Values.postgres.tolerations.key }}
        operator: Equal
        value: {{ .Values.postgres.tolerations.value }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  template:
    metadata:
      labels:
        app: api
    spec:
      serviceAccountName: hello-universe-role
      containers:
        - name: api
          image: {{ .Values.images.hellouniverseapi }}
          ports:
            - containerPort: 3000
              name: api
          env:
            - name: db-password
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db-password
            - name: DB_HOST
              value: "postgres.{{ .Values.namespace }}.svc.cluster.local"
            - name: PORT
              value: "3000"
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "counter"
            - name: DB_ENCRYPTION
              value: "disable"
            - name: DB_INIT
              value: "false"
            - name: AUTHORIZATION
              value: "true"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 35
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 3
      {{ if .Values.api.useTolerations -}}      
      tolerations:
      - effect: {{ .Values.api.tolerations.effect }}
        key: {{ .Values.api.tolerations.key }}
        operator: Equal
        value: {{ .Values.api.tolerations.value }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP # If you want to expose the API service, change this value to LoadBalancer. See below for an example.
  # type: Loadbalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: ui
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: ui
    spec:
      serviceAccountName: hello-universe-role
      initContainers:
        - name: init-container
          image: busybox
          command:
            ["/bin/sh", "-c", "echo 'sleeping for 30 seconds' && sleep 30"]
      containers:
        - name: ui
          image: {{ .Values.images.hellouniverse }}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: ui
          env:
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  name: auth-token
                  key: auth-token
            - name: API_URI
              # Leave empty and set QUERY_K8S_API to true to leverage a single loadbalancer.
              # Otherwise, set to the API service's URL and set QUERY_K8S_API to false
              value: ""
            - name: SVC_URI
              value: "api.{{ .Values.namespace }}.svc.cluster.local:3000"
            - name: API_VERSION
              value: "1"
            - name: QUERY_K8S_API
              value: "true"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 40
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 35
            periodSeconds: 3
      {{ if .Values.ui.useTolerations -}}      
      tolerations:
      - effect: {{ .Values.ui.tolerations.effect }}
        key: {{ .Values.ui.tolerations.key }}
        operator: Equal
        value: {{ .Values.ui.tolerations.value }}
      {{- end }}
{{ end }}
