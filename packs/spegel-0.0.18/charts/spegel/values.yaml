image:
  # -- Image repository.
  repository: ghcr.io/xenitab/spegel
  # -- Image Pull Policy.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # -- Image digest.
  digest: ""


# -- Image Pull Secrets
imagePullSecrets: []
# -- Overrides the name of the chart.
nameOverride: ""
# -- Overrides the full name of the chart.
fullnameOverride: ""
# -- Overrides the namespace where spegel resources are installed.
namespaceOverride: ""

serviceAccount:
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- Annotations to add to the pod.
podAnnotations: {}

# -- Security context for the pod.
podSecurityContext: {}
  # fsGroup: 2000

# -- Security context for the Spegel container.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  registry:
    # -- Port to expose the registry via the service.
    port: 5000
    # -- Node port to expose the registry via the service.
    nodePort: 30021
    # -- Local host port to expose the registry.
    hostPort: 30020
    # -- If true adds topology aware hints annotation to node port service.
    topologyAwareHintsEnabled: true
  router:
    # -- Port to expose the router via the service.
    port: 5001
  metrics:
    # -- Port to expose the metrics via the service.
    port: 9090

# -- Resource requests and limits for the Spegel container.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Node selector for pod assignment.
nodeSelector:
  kubernetes.io/os: linux

# -- An update strategy to replace existing pods with new pods.
updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

# -- Tolerations for pod assignment.
tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoExecute
    operator: Exists
  - effect: NoSchedule
    operator: Exists

# -- Affinity settings for pod assignment.
affinity: {}

serviceMonitor:
  # -- If true creates a Prometheus Service Monitor.
  enabled: false
  # -- Prometheus scrape interval.
  interval: 60s
  # -- Prometheus scrape interval timeout.
  scrapeTimeout: 30s
  # -- Service monitor specific labels for prometheus to discover servicemonitor.
  labels: {}

# -- Priority class name to use for the pod.
priorityClassName: system-node-critical

spegel:
  # -- Registries for which mirror configuration will be created.
  registries:
    - https://docker.io
    - https://ghcr.io
    - https://quay.io
    - https://mcr.microsoft.com
    - https://public.ecr.aws
    - https://gcr.io
    - https://registry.k8s.io
    - https://k8s.gcr.io
    - https://lscr.io
  # -- Additional target mirror registries other than Spegel.
  additionalMirrorRegistries: []
  # -- Max ammount of mirrors to attempt.
  mirrorResolveRetries: 3
  # -- Max duration spent finding a mirror.
  mirrorResolveTimeout: "5s"
  # -- Path to Containerd socket.
  containerdSock: "/run/containerd/containerd.sock"
  # -- Containerd namespace where images are stored.
  containerdNamespace: "k8s.io"
  # -- Path to Containerd mirror configuration.
  containerdRegistryConfigPath: "/etc/containerd/certs.d"
  # -- If true Spegel will add mirror configuration to the node.
  containerdMirrorAdd: true
  # -- Path to Kubeconfig credentials, should only be set if Spegel is run in an environment without RBAC.
  kubeconfigPath: ""
  # -- When true Spegel will resolve tags to digests.
  resolveTags: true
  # -- When true latest tags will be resolved to digests.
  resolveLatestTag: true
  # -- Maximum write speed per request when serving blob layers. Should be an integer followed by unit Bps, KBps, MBps, GBps, or TBps.
  blobSpeed: ""
